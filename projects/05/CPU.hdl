// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Note: PC output and addressM are 15 bits because RAM addressess are 15 bits
    // A Register and Mux
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=Ain);
    // A load
    Not(in=instruction[15], out=notOpcode);
    Or(a=notOpcode, b=instruction[5], out=ALoadin);
    ARegister(in=Ain, load=ALoadin, out=Aout, out[0..14]=addressM);
    // A or M input to ALU
    Mux16(a=Aout, b=inM, sel=instruction[12], out=ALUy);
    // D Load
    And(a=instruction[15], b=instruction[4], out=DLoadin);
    // D Register
    DRegister(in=ALUout, load=DLoadin, out=ALUx);
    // ALU
    ALU(x=ALUx, y=ALUy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=JEQ, ng=JLT);
    // write to M?
    And(a=instruction[15], b=instruction[3], out=writeM);
    // jump conditions
    Not(in=JEQ, out=JNE);
    Not(in=JLT, out=JGE);
    Or(a=JLT, b=JEQ, out=JLE);
    Not(in=JLE, out=JGT);
    // 8 way mux 1Lvl
    Mux(a=false, b=JGT, sel=instruction[0], out=mux1Lvl1);
    Mux(a=JEQ, b=JGE, sel=instruction[0], out=mux1Lvl2);
    Mux(a=JLT, b=JNE, sel=instruction[0], out=mux1Lvl3);
    Mux(a=JLE, b=true, sel=instruction[0], out=mux1Lvl4);
    // 2Lvl
    Mux(a=mux1Lvl1, b=mux1Lvl2, sel=instruction[1], out=mux2Lvl1);
    Mux(a=mux1Lvl3, b=mux1Lvl4, sel=instruction[1], out=mux2Lvl2);
    // PC load
    Mux(a=mux2Lvl1, b=mux2Lvl2, sel=instruction[2], out=Mux8out);
    And(a=instruction[15], b=Mux8out, out=PCload);
    PC(in=Aout, load=PCload, inc=true, reset=reset, out[0..14]=pc);
}